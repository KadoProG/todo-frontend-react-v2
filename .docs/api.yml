openapi: '3.0.4'
info:
  title: 'Laravel'
  version: '0.0.1'
servers:
  - url: 'http://localhost:8080/api'
paths:
  /v1/login:
    post:
      operationId: 'login'
      tags:
        - 'Auth'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'string'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  error:
                    type: 'string'
                    example: 'Unauthorized'
                required:
                  - 'error'
  /v1/logout:
    post:
      operationId: 'auth.logout'
      tags:
        - 'Auth'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  message:
                    type: 'string'
                    example: 'Successfully logged out'
                required:
                  - 'message'
  /v1/register:
    post:
      operationId: 'auth.register'
      tags:
        - 'Auth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                name:
                  type: 'string'
                  maxLength: 255
                email:
                  type: 'string'
                  format: 'email'
                  maxLength: 255
                password:
                  type: 'string'
                  minLength: 6
                password_confirmation:
                  type: 'string'
                  minLength: 6
              required:
                - 'name'
                - 'email'
                - 'password'
                - 'password_confirmation'
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: 'string'
        422:
          $ref: '#/components/responses/ValidationException'
  /v1/refresh:
    post:
      operationId: 'auth.refresh'
      tags:
        - 'Auth'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  token:
                    type: 'string'
                required:
                  - 'token'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  error:
                    type: 'string'
                    example: 'Token not provided'
                required:
                  - 'error'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  error:
                    type: 'string'
                    example: 'Could not refresh token'
                  detail:
                    type: 'string'
                required:
                  - 'error'
                  - 'detail'
  /v1/tasks:
    get:
      operationId: 'task.index'
      summary: 'タスク一覧取得'
      tags:
        - 'Task'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  tasks:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/TaskResource'
                required:
                  - 'tasks'
        401:
          $ref: '#/components/responses/AuthenticationException'
    post:
      operationId: 'tasks.store'
      summary: '新規タスク作成'
      tags:
        - 'Task'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                title:
                  type: string
                  maxLength: 255
                is_public:
                  type: boolean
                description:
                  type: string
                  nullable: true
                expired_at:
                  type: string
                  nullable: true
                  format: 'date'
                assigned_user_ids:
                  type: array
                  nullable: true
                  items:
                    type: 'integer'
              required:
                - 'title'
                - 'is_public'
      responses:
        200:
          description: '`TaskResource`'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  task:
                    $ref: '#/components/schemas/TaskResource'
                required:
                  - 'task'
        401:
          $ref: '#/components/responses/AuthenticationException'
        422:
          $ref: '#/components/responses/ValidationException'
  /v1/tasks/{task}:
    get:
      operationId: 'tasks.show'
      summary: 'タスク単体取得'
      tags:
        - 'Task'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
      responses:
        200:
          description: '`TaskResource`'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  task:
                    $ref: '#/components/schemas/TaskResource'
                required:
                  - 'task'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
    put:
      operationId: 'tasks.update'
      summary: 'タスク更新'
      tags:
        - 'Task'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                title:
                  type: 'string'
                  maxLength: 255
                is_public:
                  type: 'boolean'
                expired_at:
                  type: string
                  nullable: true
                  format: 'date'
                description:
                  type: string
                  nullable: true
                is_done:
                  type: 'boolean'
                assigned_user_ids:
                  type: array
                  nullable: true
                  items:
                    type: 'integer'
      responses:
        200:
          description: '`TaskResource`'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  task:
                    $ref: '#/components/schemas/TaskResource'
                required:
                  - 'task'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
        422:
          $ref: '#/components/responses/ValidationException'
    delete:
      operationId: 'tasks.destroy'
      summary: 'タスク削除'
      tags:
        - 'Task'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
      responses:
        204:
          description: 'No content'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
  /v1/tasks/{task}/actions:
    get:
      operationId: 'actions.index'
      summary: 'タスクに対応するアクション一覧'
      tags:
        - 'TaskAction'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  actions:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/TaskActionResource'
                required:
                  - 'actions'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
    post:
      operationId: 'actions.store'
      summary: 'タスクに対応するアクション作成'
      tags:
        - 'TaskAction'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                name:
                  type: 'string'
                is_done:
                  type: 'boolean'
              required:
                - 'name'
      responses:
        200:
          description: '`TaskActionResource`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskActionResource'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
        422:
          $ref: '#/components/responses/ValidationException'
  /v1/tasks/{task}/actions/{action}:
    put:
      operationId: 'actions.update'
      summary: 'タスクに対応するアクション更新'
      tags:
        - 'TaskAction'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
        - name: 'action'
          in: 'path'
          required: true
          description: 'The action ID'
          schema:
            type: 'integer'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                name:
                  type: 'string'
                is_done:
                  type: 'boolean'
      responses:
        200:
          description: '`TaskActionResource`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskActionResource'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
        422:
          $ref: '#/components/responses/ValidationException'
    delete:
      operationId: 'actions.destroy'
      summary: 'タスクに対応するアクション削除'
      tags:
        - 'TaskAction'
      parameters:
        - name: 'task'
          in: 'path'
          required: true
          description: 'The task ID'
          schema:
            type: 'integer'
        - name: 'action'
          in: 'path'
          required: true
          description: 'The action ID'
          schema:
            type: 'integer'
      responses:
        204:
          description: 'No content'
        401:
          $ref: '#/components/responses/AuthenticationException'
        404:
          $ref: '#/components/responses/ModelNotFoundException'
  /v1/users/me:
    get:
      operationId: 'user.me'
      summary: '自身のユーザ取得'
      tags:
        - 'User'
      responses:
        200:
          description: '`UserResource`'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  user:
                    $ref: '#/components/schemas/UserResource'
                required:
                  - 'user'
        401:
          $ref: '#/components/responses/AuthenticationException'
  /v1/users:
    get:
      operationId: 'user.index'
      summary: 'ユーザ一覧取得'
      tags:
        - 'User'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  users:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/UserResource'
                required:
                  - 'users'
        401:
          $ref: '#/components/responses/AuthenticationException'
  /v1/users/me/tasks:
    get:
      operationId: 'userMeTask.index'
      summary: '自身のタスク一覧取得'
      tags:
        - 'UserMeTask'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  tasks:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/TaskResource'
                required:
                  - 'tasks'
        401:
          $ref: '#/components/responses/AuthenticationException'
components:
  schemas:
    TaskActionResource:
      type: 'object'
      properties:
        id:
          type: 'integer'
        task_id:
          type: 'integer'
        name:
          type: 'string'
        is_done:
          type: 'boolean'
        created_at:
          type: string
          nullable: true
          format: 'date-time'
        updated_at:
          type: string
          nullable: true
          format: 'date-time'
        deleted_at:
          type: string
          nullable: true
          format: 'date-time'
      required:
        - 'id'
        - 'task_id'
        - 'name'
        - 'is_done'
        - 'created_at'
        - 'updated_at'
        - 'deleted_at'
      title: 'TaskActionResource'
    TaskResource:
      type: 'object'
      properties:
        id:
          type: 'integer'
        title:
          type: 'string'
        description:
          type: string
          nullable: true
        is_public:
          type: 'boolean'
        is_done:
          type: 'boolean'
        expired_at:
          type: string
          nullable: true
          format: 'date-time'
        created_user_id:
          type: 'integer'
        created_at:
          type: string
          nullable: true
          format: 'date-time'
        updated_at:
          type: string
          nullable: true
          format: 'date-time'
        created_user:
          $ref: '#/components/schemas/UserResource'
        assigned_users:
          type: 'array'
          items:
            $ref: '#/components/schemas/UserResource'
      required:
        - 'id'
        - 'title'
        - 'description'
        - 'is_public'
        - 'is_done'
        - 'expired_at'
        - 'created_user_id'
        - 'created_at'
        - 'updated_at'
        - 'created_user'
        - 'assigned_users'
      title: 'TaskResource'
    UserResource:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        email:
          type: 'string'
        email_verified_at:
          type: string
          nullable: true
          format: 'date-time'
        created_at:
          type: string
          nullable: true
          format: 'date-time'
        updated_at:
          type: string
          nullable: true
          format: 'date-time'
      required:
        - 'id'
        - 'name'
        - 'email'
        - 'email_verified_at'
        - 'created_at'
        - 'updated_at'
      title: 'UserResource'
  responses:
    ValidationException:
      description: 'Validation error'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                description: 'Errors overview.'
              errors:
                type: 'object'
                description: 'A detailed description of each field that failed validation.'
                additionalProperties:
                  type: 'array'
                  items:
                    type: 'string'
            required:
              - 'message'
              - 'errors'
    AuthenticationException:
      description: 'Unauthenticated'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                description: 'Error overview.'
            required:
              - 'message'
    ModelNotFoundException:
      description: 'Not found'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                description: 'Error overview.'
            required:
              - 'message'
